{"version":3,"sources":["earthflag.png","components/Passover.js","components/Locationform.js","components/Passovers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Passover","_ref","_ref$passover","passover","duration","risetime","timeVisible","Math","floor","react_default","a","createElement","className","id","UNIX_timestamp","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","timeConverter","Locationform","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","lat","long","handleLat","e","newLat","target","value","setState","handleLong","newLong","handleKeyDown","key","window","location","inherits","createClass","noValidate","autoComplete","TextField_default","defineProperty","label","onChange","onKeyDown","margin","Component","PASSOVERS_QUERY","gql","_templateObject","Passovers","props","match","params","parseInt","react","components_Locationform","react_apollo_browser_umd","query","variables","loading","error","data","console","log","isspassovers","response","map","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","Route","exact","path","component","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75758375.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earthflag.8d29dc14.png\";","import React from 'react';\n\nexport default function Passover({ passover: { duration, risetime } }) {\n  function timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time =\n      date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n  }\n  var timeVisible = Math.floor(duration / 60);\n\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-'>\n          <h4 id='risetime'>Date and time: {timeConverter(risetime)}</h4>\n          <h4>Visible for {timeVisible} minutes</h4>\n        </div>\n        <div className='col-md-3' />\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Link } from 'react-router-dom';\n\nexport class Locationform extends Component {\n  //sets initial states so we con't get a component error\n  state = {\n    lat: '',\n    long: ''\n  };\n  //these two functions handle the logging of keys typed into our entry forms\n  handleLat = e => {\n    const newLat = e.target.value;\n    this.setState({\n      lat: newLat\n    });\n  };\n\n  handleLong = e => {\n    const newLong = e.target.value;\n    this.setState({\n      long: newLong\n    });\n  };\n  //submits the data on enter press\n  handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      //this.props.submit(this.state.nlong, this.state.nat);\n      window.location = `/passovers/${this.state.lat}:${this.state.long}`;\n    }\n  };\n\n  render() {\n    const { long } = this.state;\n    const { lat } = this.state;\n    function handleClick() {\n      window.location = `/passovers/${this.state.lat}:${this.state.long}`;\n    }\n    return (\n      <div>\n        <h4 className='info'>\n          Enter your longitude and latitude and see the date and time for the\n          next 10 passes of the International Space Station.\n        </h4>\n\n        <form className='container formbox' noValidate autoComplete='off'>\n          <TextField\n            label='Longitude'\n            onChange={this.handleLat}\n            onKeyDown={this.handleKeyDown}\n            className='textField'\n            value={lat}\n            margin='normal'\n            className='input'\n          />\n          <TextField\n            label='Latitude'\n            onChange={this.handleLong}\n            onKeyDown={this.handleKeyDown}\n            className='textField'\n            value={long}\n            margin='normal'\n            className='input'\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Locationform;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Passover from './Passover';\nimport Locationform from './Locationform';\n\nconst PASSOVERS_QUERY = gql`\n  query PassoverQuery($lat: Float!, $long: Float!) {\n    isspassovers(lat: $lat, long: $long) {\n      response {\n        risetime\n        duration\n      }\n    }\n  }\n`;\n\nexport class Passovers extends Component {\n  render() {\n    let { lat } = this.props.match.params;\n    lat = parseInt(lat);\n    let { long } = this.props.match.params;\n    long = parseInt(long);\n\n    return (\n      <Fragment>\n        <Locationform />\n        <h1 className='passheader'>ISS Passovers</h1>\n        <Query query={PASSOVERS_QUERY} variables={{ lat, long }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) return `Error!: ${error}`;\n            console.log(lat);\n            return (\n              <Fragment>\n                {data.isspassovers.response.map(passover => (\n                  <Passover key={passover.risetime} passover={passover} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Passovers;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Passovers from './components/Passovers';\nimport Locationform from './components/Locationform';\nimport './App.css';\nimport logo from './earthflag.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className='container'>\n            <img\n              src={logo}\n              alt='World Flag'\n              style={{ width: 300, display: 'block', margin: 'auto' }}\n            />\n            <div className='card'>\n              <Route exact path='/' component={Locationform} />\n              <Route exact path='/passovers/:lat:long' component={Passovers} />\n            </div>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}