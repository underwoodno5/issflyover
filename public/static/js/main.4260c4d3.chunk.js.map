{"version":3,"sources":["earthflag.png","components/Passover.js","components/Passovers.js","components/Geocodeform.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Passover","_ref","_ref$passover","passover","duration","risetime","addZero","i","timeVisible","Math","floor","react_default","a","createElement","className","id","UNIX_timestamp","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","timeConverter","PASSOVERS_QUERY","gql","_templateObject","Passovers","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","lat","props","match","params","parseInt","long","console","log","react","onClick","window","location","react_apollo_browser_umd","query","variables","loading","error","data","concat","isspassovers","response","map","Component","GEOCODE_QUERY","Geocodeform_templateObject","Geocodeform","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","state","holdingLocation","handleLocation","e","newLocation","target","setState","handleKeyDown","preventDefault","_this2","href","rel","notifyOnNetworkStatusChange","noValidate","autoComplete","TextField_default","label","onChange","onKeyDown","margin","geocode","results","locations","latLng","lng","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","Route","exact","path","component","Geocode","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4260c4d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earthflag.8d29dc14.png\";","import React from 'react';\n\nexport default function Passover({ passover: { duration, risetime } }) {\n  function addZero(i) {\n    if (i < 10) {\n      i = '0' + i;\n    }\n    return i;\n  }\n\n  function timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec'\n    ];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = addZero(a.getHours());\n    var min = addZero(a.getMinutes());\n    var time = date + ' ' + month + ' ' + year + ' at ' + hour + ':' + min;\n    return time;\n  }\n  var timeVisible = Math.floor(duration / 60);\n\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-'>\n          <h4 id='risetime'>Date and time: {timeConverter(risetime)}</h4>\n          <h4>Visible for {timeVisible} minutes</h4>\n        </div>\n        <div className='col-md-3' />\n      </div>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Passover from './Passover';\nconst PASSOVERS_QUERY = gql`\n  query PassoverQuery($lat: Float!, $long: Float!) {\n    isspassovers(lat: $lat, long: $long) {\n      response {\n        risetime\n        duration\n      }\n    }\n  }\n`;\n\nexport class Passovers extends Component {\n  render() {\n    let { lat } = this.props.match.params;\n    lat = parseInt(lat);\n    let { long } = this.props.match.params;\n    long = parseInt(long);\n    console.log(lat);\n    console.log(long);\n\n    return (\n      <Fragment>\n        <h1 className='passheader'>ISS Passovers</h1>\n        <button\n          className='btn btn-warning'\n          onClick={() => {\n            window.location = `/`;\n          }}\n        >\n          Back!\n        </button>\n        <Query query={PASSOVERS_QUERY} variables={{ lat, long }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) return `Error!: ${error}`;\n            return (\n              <Fragment>\n                {data.isspassovers.response.map(passover => (\n                  <Passover key={passover.risetime} passover={passover} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Passovers;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport TextField from '@material-ui/core/TextField';\n\nconst GEOCODE_QUERY = gql`\n  query GeocodeQuery($location: String!) {\n    geocode(location: $location) {\n      results {\n        locations {\n          latLng {\n            lat\n            lng\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport class Geocodeform extends Component {\n  //sets initial states so we con't get a component error\n  state = {\n    location: \"St. John's Newfoundland\",\n    holdingLocation: \"St. John's Newfoundland\"\n  };\n\n  //these two functions handle the logging of keys typed into our entry forms\n  handleLocation = e => {\n    const newLocation = e.target.value;\n    this.setState({\n      holdingLocation: newLocation\n    });\n  };\n\n  handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      const newLocation = e.target.value;\n      this.setState({\n        location: newLocation\n      });\n    }\n  };\n\n  render() {\n    const { holdingLocation } = this.state;\n    const { location } = this.state;\n\n    return (\n      <div>\n        <h4 className='info'>\n          Enter your location and press{' '}\n          <span className='secondarycolor'>enter</span> to convert it to\n          long/lat. Then press <span className='secondarycolor'>submit</span> to\n          check the next 10 passes of the ISS . St. John's NL is used as an\n          example. You can double check your lat/long here:\n          <a\n            href='https://www.latlong.net/'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            {' '}\n            latlong.net\n          </a>\n        </h4>\n        <Query\n          query={GEOCODE_QUERY}\n          variables={{ location, holdingLocation }}\n          notifyOnNetworkStatusChange\n        >\n          {({ loading, error, data }) => {\n            //if (networkStatus === 4) return 'Refetching!';\n            if (loading) return <h4>Loading...</h4>;\n            if (error) return `Error!: ${error}`;\n            //console.log(data.geocode.results[0].locations[0].latLng.lat);\n            //console.log(location);\n            return (\n              <div>\n                <form\n                  className='container formbox'\n                  noValidate\n                  autoComplete='off'\n                >\n                  <TextField\n                    label='Location'\n                    onChange={this.handleLocation}\n                    onKeyDown={this.handleKeyDown}\n                    className='textField'\n                    value={holdingLocation}\n                    margin='normal'\n                  />\n                </form>\n                <br />\n                <h6 className='latlng'>\n                  Your lat: {data.geocode.results[0].locations[0].latLng.lat}\n                  <br />\n                  Your long: {data.geocode.results[0].locations[0].latLng.lng}\n                </h6>\n                <br />\n                <button\n                  className='btn btn-warning'\n                  onClick={() => {\n                    window.location = `/passovers/${\n                      data.geocode.results[0].locations[0].latLng.lat\n                    }:/${data.geocode.results[0].locations[0].latLng.lng}`;\n                  }}\n                >\n                  Submit!\n                </button>\n              </div>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nexport default Geocodeform;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Passovers from './components/Passovers';\nimport Geocode from './components/Geocodeform';\nimport './App.css';\nimport logo from './earthflag.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className='container'>\n            <div className='flag-container'>\n              <img\n                src={logo}\n                alt='World Flag'\n                style={{ width: 300, display: 'block', margin: 'auto' }}\n              />\n            </div>\n            <div className='card'>\n              <Route exact path='/' component={Geocode} />\n              <Route exact path='/passovers/:lat/:long' component={Passovers} />\n              <Route exact path='/geo' component={Geocode} />\n            </div>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}